1<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>


        select#FilterSelectList {
            -webkit-appearance: button;
            -webkit-border-radius: 2px;
            -webkit-box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
            -webkit-padding-end: 20px;
            -webkit-padding-start: 2px;
            -webkit-user-select: none;
            background-image: url(http://i62.tinypic.com/15xvbd5.png), -webkit-linear-gradient(#FAFAFA, #F4F4F4 40%, #E5E5E5);
            background-position: 97% center;
            background-repeat: no-repeat;
            border: 1px solid #AAA;
            color: #555;
            font-size: inherit;
            margin: 20px;
            overflow: hidden;
            padding: 5px 10px;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: 300px;
        }

        h1 {
            font-size: 25px;
            color: #fff;
            text-transform: uppercase;
            font-weight: 300;
            text-align: center;
            margin-bottom: 15px;
        }

        table {
            width: 100%;
            table-layout: fixed;
        }

        .tbl-header {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .tbl-content {
            height: 300px;
            overflow-x: auto;
            margin-top: 0px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        th {
            padding: 20px 15px;
            text-align: left;
            font-weight: 500;
            font-size: 12px;
            color: #fff;
            text-transform: uppercase;
        }

        td {
            padding: 15px;
            text-align: left;
            vertical-align: middle;
            font-weight: 300;
            font-size: 12px;
            color: #fff;
            border-bottom: solid 1px rgba(255, 255, 255, 0.1);
        }

        /* demo styles */

        @import url(https://fonts.googleapis.com/css?family=Roboto:400,500,300,700);
        body {
            background: -webkit-linear-gradient(left, #25c481, #25b7c4);
            background: linear-gradient(to right, #25c481, #25b7c4);
            font-family: 'Roboto', sans-serif;
        }

        section {
            margin: 50px;
        }

        /* follow me template */
        .made-with-love {
            margin-top: 40px;
            padding: 10px;
            clear: left;
            text-align: center;
            font-size: 10px;
            font-family: arial;
            color: #fff;
        }

        .made-with-love i {
            font-style: big;
            color: #F50057;
            font-size: 14px;
            position: relative;
            top: 2px;
        }

        .made-with-love a {
            color: #fff;
            text-decoration: none;
        }

        .made-with-love a:hover {
            text-decoration: underline;
        }

        /* for custom scrollbar for webkit browser*/

        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
        }

        ::-webkit-scrollbar-thumb {
            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
        }

    </style>
    <title>Berks plugin</title>
</head>

<body>

<section>
    <h1>Select filter to see issues</h1>

    <label>
        <center><select name='options' id="FilterSelectList" onchange="FilterSelectListFunction()"></select>
        </center>
    </label>

    <div class="tbl-header">
        <table cellpadding="0" cellspacing="0" border="0">
            <thead>
            <tr>

            </tr>
            </thead>
        </table>
    </div>
    <div id="showData" class="tbl-content">
        <table cellpadding="0" cellspacing="0" border="0">
            <tbody>

            </tbody>
        </table>
    </div>
</section>


<script>
    var jsonResponseissue;

    //This request is to brings filters
    (function () {
        var httpRequest;
        makeRequest('http://localhost:2990/jira/rest/gadget/1.0/pickers/filters?fieldName=quickfind&query=&_=1476427874103');
        function makeRequest(url) {
            httpRequest = new XMLHttpRequest();
            if (!httpRequest) {
                alert('Giving up :( Cannot create an XMLHTTP instance');
                return false;
            }
            httpRequest.onreadystatechange = alertContents;
            httpRequest.open('GET', url);
            httpRequest.send();
        }

//This function runs if Httprequest is succesful
        function alertContents() {
            var filtersarray = [];
            if (httpRequest.readyState === XMLHttpRequest.DONE) {
                if (httpRequest.status === 200) {
                    var jsonResponse = JSON.parse(httpRequest.responseText);
                    for (var i = 0; i < jsonResponse.filters.length; i++) {
                        filtersarray.push(jsonResponse.filters[i].id + ":" + jsonResponse.filters[i].name);
                    }
                    var sel = document.getElementById('FilterSelectList');
                    for (var i = 0; i < filtersarray.length; i++) {
                        var opt = document.createElement('option');
                        opt.innerHTML = jsonResponse.filters[i].name;
                        opt.value = filtersarray[i];
                        sel.appendChild(opt);
                    }
                } else {
                    alert('There was a problem with the request.');
                }
            }
        }
    })();


    //Each time select list item is clicked this function runs
    function FilterSelectListFunction() {
        var table;
        if (typeof table !== "undefined") {
            table.innerHTML = "";
        }
        var aramaurl;
        var x = document.getElementById("FilterSelectList").value;
        httpRequestjql = new XMLHttpRequest();

        if (!httpRequestjql) {
            alert('Giving up :( Cannot create an XMLHTTP instance');
            return false;
        }

        httpRequestjql.onreadystatechange = jqlrequestanswer;
        //Search filter with its ID
        httpRequestjql.open('GET', 'http://localhost:2990/jira/rest/api/2/filter/' + x.substring(0, x.indexOf(":")));
        httpRequestjql.send();
        var jsonResponsejql;

        function jqlrequestanswer() {
            if (httpRequestjql.readyState === XMLHttpRequest.DONE) {
                if (httpRequestjql.status === 200) {
                    jsonResponsejql = JSON.parse(httpRequestjql.responseText);

                    //This is the search url of issue
                    aramaurl = jsonResponsejql.searchUrl;
                    httpRequestissue = new XMLHttpRequest();
                    if (!httpRequestissue) {
                        alert('Giving up :( Cannot create an XMLHTTP instance');
                        return false;
                    }
                    httpRequestissue.onreadystatechange = issuerequestanswer;
                    httpRequestissue.open('GET', aramaurl);
                    httpRequestissue.send();


                    function issuerequestanswer() {
                        if (httpRequestissue.readyState === XMLHttpRequest.DONE) {
                            if (httpRequestissue.status === 200) {
                                jsonResponseissue = JSON.parse(httpRequestissue.responseText);

                                // EXTRACT VALUE FOR HTML HEADER.
                                var col = [];
                                col.push('Key');
                                col.push('Summary');
                                col.push('Created');
                                col.push('Assignee');
                                col.push('Issue Type');
                                col.push('Status');
                                col.push('Groups');
                                col.push('Roles');


                                // CREATE DYNAMIC TABLE.
                                table = document.createElement("table");

                                // CREATE HTML TABLE HEADER ROW USING THE EXTRACTED HEADERS ABOVE.

                                var tr = table.insertRow(-1);                   // TABLE ROW.

                                for (var f = 0; f < col.length; f++) {
                                    var th = document.createElement("th");      // TABLE HEADER.
                                    th.innerHTML = col[f];
                                    tr.appendChild(th);
                                }

                                // ADD JSON DATA TO THE TABLE AS ROWS.
                                for (var i = 0; i < jsonResponseissue.issues.length; i++) {

                                    tr = table.insertRow(-1);
                                    var jsonRequestgroup;
                                    for (var j = 0; j < col.length; j++) {
                                        var tabCell = tr.insertCell(-1);

                                        switch (j) {
                                            case 0:
                                                tabCell.innerHTML = '<a href="' + 'http://localhost:2990/jira/browse/' + jsonResponseissue.issues[i].key + '">' + jsonResponseissue.issues[i].key + '</a>';
                                                break;
                                            case 1:
                                                tabCell.innerHTML = jsonResponseissue.issues[i].fields.summary;
                                                break;
                                            case 2:
                                                var y = jsonResponseissue.issues[i].fields.created;
                                                tabCell.innerHTML = y.substring(0, y.indexOf("T")) + "  " + y.substring(y.indexOf(":") + 1, y.indexOf("."));
                                                break;
                                            case 3:
                                                if (jsonResponseissue.issues[i].fields.assignee !== null) {
                                                    tabCell.innerHTML = jsonResponseissue.issues[i].fields.assignee.name;
                                                }
                                                else {
                                                    tabCell.innerHTML = 'Unassigned';
                                                }
                                                break;
                                            case 4:
                                                tabCell.innerHTML = jsonResponseissue.issues[i].fields.issuetype.name;
                                                break;
                                            case 5:
                                                tabCell.innerHTML = jsonResponseissue.issues[i].fields.status.name;
                                                break;
                                            case 6:
                                                if (jsonResponseissue.issues[i].fields.assignee !== null) {
                                                    httpRequestgroup = new XMLHttpRequest();
                                                    if (!httpRequestgroup) {
                                                        alert('Giving up :( Cannot create an XMLHTTP instance');
                                                        return false;
                                                    }
                                                    httpRequestgroup.onreadystatechange = jqlrequestanswer3;
                                                    httpRequestgroup.open('GET', 'http://localhost:2990/jira/rest/api/2/user?username=' + jsonResponseissue.issues[i].fields.assignee.name + '&expand=groups', false);
                                                    httpRequestgroup.send();
                                                    function jqlrequestanswer3() {

                                                        if (httpRequestgroup.readyState === XMLHttpRequest.DONE) {
                                                            if (httpRequestgroup.status === 200) {

                                                                jsonRequestgroup = JSON.parse(httpRequestgroup.responseText);
                                                                var boyut = jsonRequestgroup.groups.size;
                                                                var array = jsonRequestgroup.groups.items[0].name;
                                                                var buffer;

                                                                for (var k = 1; k < boyut; k++) {

                                                                    buffer = jsonRequestgroup.groups.items[k].name;
                                                                    array = array + ',' + buffer;
                                                                    buffer = null;
                                                                }

                                                                tabCell.innerHTML = array;

                                                            }
                                                        }
                                                    }

                                                }
                                                break;
                                            case 7:

                                                if (jsonResponseissue.issues[i].key !== null) {
                                                    httpRequestrolesfind = new XMLHttpRequest();
                                                    if (!httpRequestrolesfind) {
                                                        alert('Giving up :( Cannot create an XMLHTTP instance');
                                                        return false;
                                                    }
                                                    httpRequestrolesfind.onload = jqlrequestanswer4;
                                                    httpRequestrolesfind.open('GET', "http://localhost:2990/jira/rest/api/2/project/" + jsonResponseissue.issues[i].fields.project.key, false);
                                                    httpRequestrolesfind.send();

                                                    function jqlrequestanswer4() {
                                                        if (httpRequestrolesfind.readyState === XMLHttpRequest.DONE) {
                                                            if (httpRequestrolesfind.status === 200) {
                                                                jsonRequestroles = JSON.parse(httpRequestrolesfind.responseText);
                                                                var rolecount = 0;
                                                                for (var prop in jsonRequestroles.roles) {
                                                                    if (jsonRequestroles.roles.hasOwnProperty(prop)) {
                                                                        httpRequestrole2 = new XMLHttpRequest();
                                                                        if (!httpRequestrole2) {
                                                                            alert('Giving up :( Cannot create an XMLHTTP instance');
                                                                            return false;
                                                                        }
                                                                        httpRequestrole2.onreadystatechange = jqlrequestanswer5;
                                                                        httpRequestrole2.open('GET', jsonRequestroles["roles"][prop], false);
                                                                        httpRequestrole2.send();
                                                                        function jqlrequestanswer5() {
                                                                            if (httpRequestrole2.readyState === XMLHttpRequest.DONE) {
                                                                                if (httpRequestrole2.status === 200) {
                                                                                    jsonRequestrole2 = JSON.parse(httpRequestrole2.responseText);
                                                                                    var buffer2;
                                                                                    var array2;
                                                                                    for (var m = 0; m < jsonRequestrole2.actors.length; m++) {
                                                                                        if (jsonRequestrole2.actors[m].name == jsonResponseissue.issues[i].fields.assignee.name) {
                                                                                            tabCell.innerHTML = tabCell.innerHTML + prop + " , ";
                                                                                        }
                                                                                    }

                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }

                                                    break;

                                                }
                                        }
                                    }
                                }

                                // FINALLY ADD THE NEWLY CREATED TABLE WITH JSON DATA TO A CONTAINER.
                                var divContainer = document.getElementById("showData");
                                divContainer.innerHTML = "";
                                divContainer.appendChild(table);

                            } else {
                                alert('There was a problem with the request 3.');
                            }
                        }
                    }

                }
                else {
                    alert('There was a problem with the request 2.');
                }
            }
        }
    }

</script>
</body>
</html>
